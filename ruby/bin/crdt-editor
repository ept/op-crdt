#!/usr/bin/env ruby

$stderr.sync = true
require 'optparse'

options = {}

parser = OptionParser.new do |opts|
  opts.banner = <<-BANNER.gsub(/^    /, '')
    Usage: crdt-editor [options] FILE
    Collaborative text editor. Press Ctrl+c to quit.

    Options:
  BANNER

  opts.on('-w', '--websocket ws://host:port/path', 'Connect to WebSocket server at this URL', String) do |url|
    options[:websocket] = url
  end
  opts.on('-j', '--join channelID', 'Collaborate on an existing document', String) do |channel_id|
    options[:channel_id] = channel_id
  end
  opts.on('-k', '--secret-key key', 'Encrypt messages with symmetric key', String) do |secret_key|
    options[:secret_key] = secret_key
  end
  opts.on('--passive',    'Run in non-interactive mode') { options[:passive   ] = true }
  opts.on('--debug-keys', 'Show keys that are pressed')  { options[:debug_keys] = true }
  opts.on('-h', '--help', 'Show usage information')      { puts opts; exit(1) }
end

parser.parse!
options[:text_filename] = ARGV.shift

if options[:text_filename].nil? || options[:websocket].nil?
  $stderr.puts parser
  exit(1)
end

$LOAD_PATH.unshift(File.expand_path('../lib', File.dirname(__FILE__)))

require 'crdt'
require 'crdt/editor'

File.open('/tmp/trvesync.log', 'a') do |logfile|
  options[:logger] = if options[:passive]
                       lambda {|msg| $stderr.puts(msg); $stderr.flush }
                     else
                       lambda {|msg| logfile.puts(msg); logfile.flush }
                     end

  options[:text_filename] = File.absolute_path(options[:text_filename])
  options[:crdt_filename] = File.join(File.dirname(options[:text_filename]),
                                      '.' + File.basename(options[:text_filename]) + '.crdt')

  if File.exists? options[:crdt_filename]
    peer = CRDT::Peer.load(options[:crdt_filename], options)
    if options[:channel_id] && peer.channel_id != options[:channel_id]
      raise "Invalid --join option: file #{options[:crdt_filename]} is for channel #{peer.channel_id}, but --join option specifies channel #{options[:channel_id]}"
    end
  else
    if options[:channel_id] && !options[:secret_key]
      raise 'When specifying --join for a new file, --secret-key is also required'
    end
    peer = CRDT::Peer.new(nil, options)
  end

  peer_contents = peer.ordered_list.to_a.join
  file_contents = File.exists?(options[:text_filename]) ? File.read(options[:text_filename]) : ''

  if peer_contents != file_contents
    raise "The contents of the text file #{options[:text_filename]} do not match the CRDT file #{options[:crdt_filename]}."
  end

  CRDT::Editor.new(peer, options).run
end
