#!/usr/bin/env ruby

$stderr.sync = true
filename = ARGV.shift

if filename.nil?
  $stderr.puts "Usage: crdt-oplog file.crdt"
  exit(1)
end

$LOAD_PATH.unshift(File.expand_path('../lib', File.dirname(__FILE__)))

require 'crdt'
require 'json'

# Takes an object consisting of nested hashes/lists/strings/etc, and transforms
# any binary strings within to be safe for encoding as JSON (which only
# supports UTF-8 strings). Uses the same charset mapping as the Avro JSON Encoder:
# https://github.com/apache/avro/blob/master/lang/java/avro/src/main/java/org/apache/avro/io/JsonEncoder.java#L216-L220
# It's an ugly hack, but at least it preserves information and it is moderately
# human-readable.
def encode_binary(obj)
  case obj
  when Hash
    obj.each_with_object({}) do |(key, value), hash|
      hash[encode_binary(key)] = encode_binary(value)
    end
  when Array
    obj.map {|elem| encode_binary(elem) }
  when String
    obj.dup.force_encoding('ISO-8859-1').encode('UTF-8')
  else
    obj
  end
end

peer = CRDT::Peer.load(filename)
message_reader = Avro::IO::DatumReader.new(CRDT::Encoding::MESSAGE_SCHEMA)
operation_reader = Avro::IO::DatumReader.new(CRDT::Encoding::APP_OPERATION_SCHEMA)

peer.message_log.each do |message|
  msg_hash = message_reader.read(Avro::IO::BinaryDecoder.new(StringIO.new(message.encoded)))
  msg_hash['sender'] = message.sender_id
  msg_hash['senderSeqNo'] = message.sender_seq_no
  msg_hash['offset'] = message.offset
  msg_hash['operations'].map! do |op_hash|
    if op_hash['operation']
      decoder = Avro::IO::BinaryDecoder.new(StringIO.new(op_hash['operation']))
      app_op = encode_binary(operation_reader.read(decoder))
      app_op.merge('target' => op_hash['target'])
    else
      op_hash
    end
  end
  puts JSON.generate(msg_hash)
end
